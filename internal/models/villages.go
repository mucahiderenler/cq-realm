// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Village is an object representing the database table.
type Village struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	X           null.Int    `boil:"x" json:"x,omitempty" toml:"x" yaml:"x,omitempty"`
	Y           null.Int    `boil:"y" json:"y,omitempty" toml:"y" yaml:"y,omitempty"`
	OwnerName   null.String `boil:"owner_name" json:"ownerName,omitempty" toml:"owner_name" yaml:"owner_name,omitempty"`
	OwnerID     null.Int    `boil:"owner_id" json:"ownerID,omitempty" toml:"owner_id" yaml:"owner_id,omitempty"`
	Point       null.Int    `boil:"point" json:"point,omitempty" toml:"point" yaml:"point,omitempty"`
	VillageType null.Int    `boil:"village_type" json:"villageType,omitempty" toml:"village_type" yaml:"village_type,omitempty"`

	R *villageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L villageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VillageColumns = struct {
	ID          string
	Name        string
	X           string
	Y           string
	OwnerName   string
	OwnerID     string
	Point       string
	VillageType string
}{
	ID:          "id",
	Name:        "name",
	X:           "x",
	Y:           "y",
	OwnerName:   "owner_name",
	OwnerID:     "owner_id",
	Point:       "point",
	VillageType: "village_type",
}

var VillageTableColumns = struct {
	ID          string
	Name        string
	X           string
	Y           string
	OwnerName   string
	OwnerID     string
	Point       string
	VillageType string
}{
	ID:          "villages.id",
	Name:        "villages.name",
	X:           "villages.x",
	Y:           "villages.y",
	OwnerName:   "villages.owner_name",
	OwnerID:     "villages.owner_id",
	Point:       "villages.point",
	VillageType: "villages.village_type",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var VillageWhere = struct {
	ID          whereHelperint
	Name        whereHelpernull_String
	X           whereHelpernull_Int
	Y           whereHelpernull_Int
	OwnerName   whereHelpernull_String
	OwnerID     whereHelpernull_Int
	Point       whereHelpernull_Int
	VillageType whereHelpernull_Int
}{
	ID:          whereHelperint{field: "\"villages\".\"id\""},
	Name:        whereHelpernull_String{field: "\"villages\".\"name\""},
	X:           whereHelpernull_Int{field: "\"villages\".\"x\""},
	Y:           whereHelpernull_Int{field: "\"villages\".\"y\""},
	OwnerName:   whereHelpernull_String{field: "\"villages\".\"owner_name\""},
	OwnerID:     whereHelpernull_Int{field: "\"villages\".\"owner_id\""},
	Point:       whereHelpernull_Int{field: "\"villages\".\"point\""},
	VillageType: whereHelpernull_Int{field: "\"villages\".\"village_type\""},
}

// VillageRels is where relationship names are stored.
var VillageRels = struct {
	Buildings string
}{
	Buildings: "Buildings",
}

// villageR is where relationships are stored.
type villageR struct {
	Buildings BuildingSlice `boil:"Buildings" json:"Buildings" toml:"Buildings" yaml:"Buildings"`
}

// NewStruct creates a new relationship struct
func (*villageR) NewStruct() *villageR {
	return &villageR{}
}

func (r *villageR) GetBuildings() BuildingSlice {
	if r == nil {
		return nil
	}
	return r.Buildings
}

// villageL is where Load methods for each relationship are stored.
type villageL struct{}

var (
	villageAllColumns            = []string{"id", "name", "x", "y", "owner_name", "owner_id", "point", "village_type"}
	villageColumnsWithoutDefault = []string{}
	villageColumnsWithDefault    = []string{"id", "name", "x", "y", "owner_name", "owner_id", "point", "village_type"}
	villagePrimaryKeyColumns     = []string{"id"}
	villageGeneratedColumns      = []string{}
)

type (
	// VillageSlice is an alias for a slice of pointers to Village.
	// This should almost always be used instead of []Village.
	VillageSlice []*Village
	// VillageHook is the signature for custom Village hook methods
	VillageHook func(context.Context, boil.ContextExecutor, *Village) error

	villageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	villageType                 = reflect.TypeOf(&Village{})
	villageMapping              = queries.MakeStructMapping(villageType)
	villagePrimaryKeyMapping, _ = queries.BindMapping(villageType, villageMapping, villagePrimaryKeyColumns)
	villageInsertCacheMut       sync.RWMutex
	villageInsertCache          = make(map[string]insertCache)
	villageUpdateCacheMut       sync.RWMutex
	villageUpdateCache          = make(map[string]updateCache)
	villageUpsertCacheMut       sync.RWMutex
	villageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var villageAfterSelectMu sync.Mutex
var villageAfterSelectHooks []VillageHook

var villageBeforeInsertMu sync.Mutex
var villageBeforeInsertHooks []VillageHook
var villageAfterInsertMu sync.Mutex
var villageAfterInsertHooks []VillageHook

var villageBeforeUpdateMu sync.Mutex
var villageBeforeUpdateHooks []VillageHook
var villageAfterUpdateMu sync.Mutex
var villageAfterUpdateHooks []VillageHook

var villageBeforeDeleteMu sync.Mutex
var villageBeforeDeleteHooks []VillageHook
var villageAfterDeleteMu sync.Mutex
var villageAfterDeleteHooks []VillageHook

var villageBeforeUpsertMu sync.Mutex
var villageBeforeUpsertHooks []VillageHook
var villageAfterUpsertMu sync.Mutex
var villageAfterUpsertHooks []VillageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Village) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range villageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Village) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range villageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Village) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range villageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Village) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range villageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Village) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range villageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Village) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range villageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Village) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range villageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Village) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range villageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Village) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range villageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVillageHook registers your hook function for all future operations.
func AddVillageHook(hookPoint boil.HookPoint, villageHook VillageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		villageAfterSelectMu.Lock()
		villageAfterSelectHooks = append(villageAfterSelectHooks, villageHook)
		villageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		villageBeforeInsertMu.Lock()
		villageBeforeInsertHooks = append(villageBeforeInsertHooks, villageHook)
		villageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		villageAfterInsertMu.Lock()
		villageAfterInsertHooks = append(villageAfterInsertHooks, villageHook)
		villageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		villageBeforeUpdateMu.Lock()
		villageBeforeUpdateHooks = append(villageBeforeUpdateHooks, villageHook)
		villageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		villageAfterUpdateMu.Lock()
		villageAfterUpdateHooks = append(villageAfterUpdateHooks, villageHook)
		villageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		villageBeforeDeleteMu.Lock()
		villageBeforeDeleteHooks = append(villageBeforeDeleteHooks, villageHook)
		villageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		villageAfterDeleteMu.Lock()
		villageAfterDeleteHooks = append(villageAfterDeleteHooks, villageHook)
		villageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		villageBeforeUpsertMu.Lock()
		villageBeforeUpsertHooks = append(villageBeforeUpsertHooks, villageHook)
		villageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		villageAfterUpsertMu.Lock()
		villageAfterUpsertHooks = append(villageAfterUpsertHooks, villageHook)
		villageAfterUpsertMu.Unlock()
	}
}

// One returns a single village record from the query.
func (q villageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Village, error) {
	o := &Village{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for villages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Village records from the query.
func (q villageQuery) All(ctx context.Context, exec boil.ContextExecutor) (VillageSlice, error) {
	var o []*Village

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Village slice")
	}

	if len(villageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Village records in the query.
func (q villageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count villages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q villageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if villages exists")
	}

	return count > 0, nil
}

// Buildings retrieves all the building's Buildings with an executor.
func (o *Village) Buildings(mods ...qm.QueryMod) buildingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"buildings\".\"village_id\"=?", o.ID),
	)

	return Buildings(queryMods...)
}

// LoadBuildings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (villageL) LoadBuildings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVillage interface{}, mods queries.Applicator) error {
	var slice []*Village
	var object *Village

	if singular {
		var ok bool
		object, ok = maybeVillage.(*Village)
		if !ok {
			object = new(Village)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVillage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVillage))
			}
		}
	} else {
		s, ok := maybeVillage.(*[]*Village)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVillage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVillage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &villageR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &villageR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`buildings`),
		qm.WhereIn(`buildings.village_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load buildings")
	}

	var resultSlice []*Building
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice buildings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on buildings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for buildings")
	}

	if len(buildingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Buildings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &buildingR{}
			}
			foreign.R.Village = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VillageID {
				local.R.Buildings = append(local.R.Buildings, foreign)
				if foreign.R == nil {
					foreign.R = &buildingR{}
				}
				foreign.R.Village = local
				break
			}
		}
	}

	return nil
}

// AddBuildings adds the given related objects to the existing relationships
// of the village, optionally inserting them as new records.
// Appends related to o.R.Buildings.
// Sets related.R.Village appropriately.
func (o *Village) AddBuildings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Building) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VillageID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"buildings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"village_id"}),
				strmangle.WhereClause("\"", "\"", 2, buildingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VillageID = o.ID
		}
	}

	if o.R == nil {
		o.R = &villageR{
			Buildings: related,
		}
	} else {
		o.R.Buildings = append(o.R.Buildings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &buildingR{
				Village: o,
			}
		} else {
			rel.R.Village = o
		}
	}
	return nil
}

// Villages retrieves all the records using an executor.
func Villages(mods ...qm.QueryMod) villageQuery {
	mods = append(mods, qm.From("\"villages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"villages\".*"})
	}

	return villageQuery{q}
}

// FindVillage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVillage(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Village, error) {
	villageObj := &Village{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"villages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, villageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from villages")
	}

	if err = villageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return villageObj, err
	}

	return villageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Village) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no villages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(villageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	villageInsertCacheMut.RLock()
	cache, cached := villageInsertCache[key]
	villageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			villageAllColumns,
			villageColumnsWithDefault,
			villageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(villageType, villageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(villageType, villageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"villages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"villages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into villages")
	}

	if !cached {
		villageInsertCacheMut.Lock()
		villageInsertCache[key] = cache
		villageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Village.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Village) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	villageUpdateCacheMut.RLock()
	cache, cached := villageUpdateCache[key]
	villageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			villageAllColumns,
			villagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update villages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"villages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, villagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(villageType, villageMapping, append(wl, villagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update villages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for villages")
	}

	if !cached {
		villageUpdateCacheMut.Lock()
		villageUpdateCache[key] = cache
		villageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q villageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for villages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for villages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VillageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), villagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"villages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, villagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in village slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all village")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Village) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no villages provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(villageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	villageUpsertCacheMut.RLock()
	cache, cached := villageUpsertCache[key]
	villageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			villageAllColumns,
			villageColumnsWithDefault,
			villageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			villageAllColumns,
			villagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert villages, could not build update column list")
		}

		ret := strmangle.SetComplement(villageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(villagePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert villages, could not build conflict column list")
			}

			conflict = make([]string, len(villagePrimaryKeyColumns))
			copy(conflict, villagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"villages\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(villageType, villageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(villageType, villageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert villages")
	}

	if !cached {
		villageUpsertCacheMut.Lock()
		villageUpsertCache[key] = cache
		villageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Village record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Village) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Village provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), villagePrimaryKeyMapping)
	sql := "DELETE FROM \"villages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from villages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for villages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q villageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no villageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from villages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for villages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VillageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(villageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), villagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"villages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, villagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from village slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for villages")
	}

	if len(villageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Village) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVillage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VillageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VillageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), villagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"villages\".* FROM \"villages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, villagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VillageSlice")
	}

	*o = slice

	return nil
}

// VillageExists checks if the Village row exists.
func VillageExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"villages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if villages exists")
	}

	return exists, nil
}

// Exists checks if the Village row exists.
func (o *Village) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VillageExists(ctx, exec, o.ID)
}
